{
  parserClass="org.apache.pig.plugin.idea.pig.parser.PigParser"
  stubParserClass="org.apache.pig.plugin.idea.pig.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Pig"
  psiImplClassSuffix="Impl"
  psiPackage="org.apache.pig.plugin.idea.pig.psi"
  psiImplPackage="org.apache.pig.plugin.idea.pig.psi.impl"

  elementTypeHolderClass="org.apache.pig.plugin.idea.pig.psi.PigTypes"
  elementTypeClass="org.apache.pig.plugin.idea.pig.psi.PigElementType"
  tokenTypeClass="org.apache.pig.plugin.idea.pig.psi.PigTokenType"

  //extends(".*_statement|comment")=statement
}

pigFile ::= (statement | comment)* {recoverUntil="recover_"}
private recover_ ::= !(statement | comment)

statement ::= SEMICOLON
            | general_statement
            | foreach_statement
            | split_statement
            | inline_statement
            | import_statement
            | realias_statement
            | preprocessor_statement
            | register_statement
            | hadoop_cmd

split_statement ::= split_clause SEMICOLON
split_clause ::= SPLIT_KEYWORD rel INTO_KEYWORD split_branch ((COMMA split_branch)+ | (COMMA split_branch)* COMMA split_otherwise)
split_branch ::= alias IF_KEYWORD cond
split_otherwise ::= alias OTHERWISE_KEYWORD

realias_statement ::= realias_clause SEMICOLON
realias_clause ::= alias EQUAL id

preprocessor_statement ::= variable_set

register_statement ::= REGISTER_KEYWORD REGISTER_FILENAME SEMICOLON
register_statementOld ::= REGISTER_KEYWORD path SEMICOLON
path ::= DIV? IDENTIFIER (DIV IDENTIFIER)* file_suffix
file_suffix ::= STAR? DOT IDENTIFIER

variable_set ::= (DECLARE_COMMAND | DEFAULT_COMMAND) param_name param_value
param_name ::= id
param_value ::= STRING_LITERAL | EXEC_LITERAL

hadoop_cmd ::= RMF_KEYWORD (path | STRING_LITERAL)

inline_statement ::= inline_clause SEMICOLON
inline_clause ::= inline_return_clause alias inline_param_clause
inline_return_clause ::= alias EQUAL
                       | alias (COMMA alias)+ EQUAL
                       |
inline_param_clause ::= LPARENTH (parameter (COMMA parameter)* )? RPARENTH
parameter ::= id
            | INTEGER_LITERAL
            | DOUBLE_LITERAL
            | STRING_LITERAL
            | DOLLARVAR

// nested foreach
foreach_statement ::= foreach_complex_statement
                    | foreach_simple_statement

foreach_complex_statement ::= (alias EQUAL)? foreach_clause_complex SEMICOLON?
foreach_simple_statement ::= (alias EQUAL)? (foreach_clause_simple parallel_clause?
                                              | LPARENTH foreach_clause_simple parallel_clause? RPARENTH) SEMICOLON

foreach_clause_simple ::= FOREACH_KEYWORD rel foreach_plan_simple
foreach_plan_simple ::= generate_clause
generate_clause ::= GENERATE_KEYWORD flatten_generated_item (COMMA flatten_generated_item)*

flatten_generated_item ::= flatten_clause (AS_KEYWORD ((LPARENTH field_def_list RPARENTH) | field_def))?
                         | col_range (AS_KEYWORD ((LPARENTH field_def_list RPARENTH) | field_def))?
                         | expr (AS_KEYWORD field_def)?
                         | STAR (AS_KEYWORD ((LPARENTH field_def_list RPARENTH) | field_def))?

flatten_clause ::= FLATTEN_KEYWORD LPARENTH expr RPARENTH

foreach_clause_complex ::= FOREACH_KEYWORD rel foreach_plan_complex

foreach_plan_complex ::= nested_blk

nested_blk ::= LBRACE nested_command_list (generate_clause SEMICOLON) RBRACE
nested_command_list ::= (nested_command SEMICOLON)*
nested_command ::= id EQUAL col_ref DOT col_ref_list
                 | id EQUAL expr
                 | id EQUAL nested_op

nested_op ::= nested_filter
            | nested_sort
            | nested_distinct
            | nested_limit
            | nested_cross
            | nested_foreach

nested_filter ::= FILTER_KEYWORD nested_op_input BY_KEYWORD cond
nested_op_input ::= col_ref | nested_proj
nested_proj ::= col_ref DOT col_ref_list

nested_sort ::= ORDER_KEYWORD nested_op_input BY_KEYWORD order_by_clause (USING_KEYWORD func_clause)?

nested_distinct ::= DISTINCT_KEYWORD nested_op_input

nested_limit ::= LIMIT_KEYWORD nested_op_input ((INTEGER_LITERAL SEMICOLON) | expr)

nested_cross ::= CROSS_KEYWORD nested_op_input_list

nested_foreach ::= FOREACH_KEYWORD nested_op_input generate_clause

nested_op_input_list ::= nested_op_input (COMMA nested_op_input)*

col_ref_list ::= (col_ref | (LPARENTH col_ref (COMMA col_ref)* RPARENTH))

import_statement ::= IMPORT_KEYWORD STRING_LITERAL SEMICOLON

general_statement ::= (alias EQUAL)? (op_clause parallel_clause? | LPARENTH op_clause parallel_clause? RPARENTH) SEMICOLON //{recoverUntil="recover_"}

alias ::= id
id ::= IDENTIFIER

parallel_clause ::= PARALLEL_KEYWORD INTEGER_LITERAL

private op_clause ::= define_clause
                    | load_clause
                    | group_clause
                    | store_clause
                    | filter_clause
                    | distinct_clause
                    | limit_clause
                    | sample_clause
                    | order_clause
                    | cross_clause
                    | join_clause
                    | union_clause
                    | stream_clause
                    | mr_clause


define_clause ::= DEFINE_KEYWORD alias (cmd | func_clause | macro_clause)

cmd ::= EXEC_LITERAL (ship_clause | cache_clause | input_clause | output_clause | error_clause)*

ship_clause ::= SHIP_KEYWORD LPARENTH path_list RPARENTH

macro_clause ::= macro_param_clause macro_return_clause macro_body_clause
macro_param_clause ::= LPARENTH (alias (COMMA alias)* )? RPARENTH
macro_return_clause ::= RETURNS_KEYWORD ((alias (COMMA alias)*) | VOID_KEYWORD)
macro_body_clause ::= content
content ::= LBRACE (content | (LBRACE | RBRACE))* RBRACE //TODO check on what ~ means

cache_clause ::= CACHE_KEYWORD LPARENTH path_list? RPARENTH

input_clause ::= INPUT_KEYWORD LPARENTH stream_cmd_list RPARENTH
stream_cmd_list ::= stream_cmd (COMMA stream_cmd)*
stream_cmd ::= (STDIN_KEYWORD | STDOUT_KEYWORD | STRING_LITERAL) (USING_KEYWORD func_clause)?

output_clause ::= OUTPUT_KEYWORD LPARENTH stream_cmd_list RPARENTH
error_clause ::= STDERROR_KEYWORD LPARENTH (STRING_LITERAL (LIMIT_KEYWORD INTEGER_LITERAL)? )? RPARENTH

load_clause ::= LOAD_KEYWORD filename (USING_KEYWORD func_clause)? as_clause? {pin=1}

func_clause ::= func_name (LPARENTH func_args? RPARENTH)? {pin=1}
func_name ::= id (DOT id)*
func_args ::= STRING_LITERAL (COMMA STRING_LITERAL)*

store_clause ::= STORE_KEYWORD rel INTO_KEYWORD filename (USING_KEYWORD func_clause)? {pin=1}

filter_clause ::= FILTER_KEYWORD rel BY_KEYWORD cond

distinct_clause ::= DISTINCT_KEYWORD rel partition_clause?

limit_clause ::= LIMIT_KEYWORD rel (INTEGER_LITERAL | LONG_LITERAL)

sample_clause ::= SAMPLE_KEYWORD rel DOUBLE_LITERAL

order_clause ::= ORDER_KEYWORD rel BY_KEYWORD order_by_clause (USING_KEYWORD func_clause)? {pin=1}
order_by_clause ::= STAR (ASC_KEYWORD | DESC_KEYWORD)? | order_col_list
private order_col_list ::= order_col (COMMA order_col)*
order_col ::= col_range (ASC_KEYWORD | DESC_KEYWORD)?
            | col_ref (ASC_KEYWORD | DESC_KEYWORD)?
            | LPARENTH col_ref (ASC_KEYWORD | DESC_KEYWORD)? RPARENTH


cross_clause ::= CROSS_KEYWORD rel_list partition_clause?
rel_list ::= rel (COMMA rel)*

union_clause ::= UNION_KEYWORD ONSCHEMA_KEYWORD? rel_list

stream_clause ::= STREAM_KEYWORD rel THROUGH_KEYWORD (EXEC_LITERAL | alias) as_clause?
as_clause ::= AS_KEYWORD (field_def | LPARENTH field_def RPARENTH)

field_def ::= id (COLON type)?
field_def_list ::= field_def (COMMA field_def)*

type ::= simple_type | tuple_type | bag_type | map_type
simple_type ::= INT_KEYWORD | LONG_KEYWORD | FLOAT_KEYWORD | DOUBLE_KEYWORD | CHARARRAY_KEYWORD
tuple_type ::= TUPLE_KEYWORD? LPARENTH field_def_list? RPARENTH
bag_type ::= BAG_KEYWORD? LBRACE ((id COLON)? tuple_type)? RBRACE
map_type ::= MAP_KEYWORD? LBRACK type? RBRACK

mr_clause ::= MAPREDUCE_KEYWORD STRING_LITERAL (LPARENTH path_list RPARENTH)? store_clause load_clause EXEC_LITERAL?
path_list ::= STRING_LITERAL (COMMA STRING_LITERAL)*

group_clause ::= (GROUP_KEYWORD | COGROUP_KEYWORD) group_item_list (USING_KEYWORD group_type)? partition_clause? {pin=1}

group_item_list ::= group_item (COMMA group_item)*
group_item ::= rel (BY_KEYWORD join_group_by_expr_list | ALL_KEYWORD | ANY_KEYWORD ) (INNER_KEYWORD | OUTER_KEYWORD)?

group_type ::= STRING_LITERAL

partition_clause ::= PARTITION_KEYWORD BY_KEYWORD func_name

col_range ::= (col_ref DOUBLE_PERIOD col_ref?) | (DOUBLE_PERIOD col_ref)

col_ref ::= alias_col_ref | dollar_col_ref
alias_col_ref ::= GROUP_KEYWORD | id
dollar_col_ref ::= DOLLARVAR
DOLLARVAR ::= DOLLAR id


join_clause ::= JOIN_KEYWORD join_sub_clause (USING_KEYWORD join_type)? partition_clause?
join_type ::= STRING_LITERAL
join_sub_clause ::= join_item (LEFT_KEYWORD | RIGHT_KEYWORD | FULL_KEYWORD) OUTER_KEYWORD? COMMA join_item
                  | join_items_list

join_item ::= rel join_group_by_clause
// we cannot name this join_item_list because Grammar-kit will generate duplicate method names for joinSubClause
join_items_list ::= join_item (COMMA join_item)+

join_group_by_clause ::= BY_KEYWORD join_group_by_expr_list
join_group_by_expr_list ::= (LPARENTH join_group_by_expr (COMMA join_group_by_expr)* RPARENTH) | join_group_by_expr
private join_group_by_expr ::= col_range | expr | STAR


expr ::= add_expr
add_expr ::= multi_expr ((PLUS | MINUS) multi_expr)*
multi_expr ::= cast_expr ((STAR | DIV | PERCENT) cast_expr)*

cast_expr ::= LPARENTH type_cast RPARENTH unary_expr
            | unary_expr
type_cast ::= simple_type | map_type | tuple_type_cast | bag_type_cast
tuple_type_cast ::= TUPLE_KEYWORD LPARENTH (type_cast (COMMA type_cast)* )? RPARENTH
bag_type_cast ::= BAG_KEYWORD LBRACE tuple_type_cast? RBRACE

unary_expr ::= expr_eval
             | LPARENTH expr RPARENTH
             | neg_expr

expr_eval ::= const_expr | var_expr
const_expr ::= literal
var_expr ::= projectable_expr (dot_proj | pound_proj)*

projectable_expr ::= func_eval | col_ref | bin_expr
dot_proj ::= DOT (col_alias_or_index | (LPARENTH col_alias_or_index (COMMA col_alias_or_index)* RPARENTH))
pound_proj ::= POUND (STRING_LITERAL | NULL_KEYWORD)

private col_alias_or_index ::= col_alias | col_index
col_alias ::= GROUP_KEYWORD | id
col_index ::= DOLLARVAR

func_eval ::= func_name LPARENTH real_arg_list? RPARENTH
real_arg_list ::= real_arg (COMMA real_arg)*
real_arg ::= expr | STAR | col_range

bin_expr ::= LPARENTH cond QMARK expr COLON expr RPARENTH

cond ::= or_cond
or_cond ::= and_cond (OR_KEYWORD and_cond)*
and_cond ::= unary_cond (AND_KEYWORD unary_cond)*
unary_cond ::= LPARENTH cond RPARENTH
             | expr rel_op expr
             | func_eval
             | null_check_cond
             | not_cond

not_cond ::= NOT_KEYWORD unary_cond
null_check_cond ::= expr IS_KEYWORD NOT_KEYWORD? NULL_KEYWORD

neg_expr ::= MINUS cast_expr

literal ::= scalar | map | bag | tuple
scalar ::= num_scalar | STRING_LITERAL | NULL_KEYWORD | BOOLEAN_TRUE | BOOLEAN_FALSE
num_scalar ::= MINUS? (INTEGER_LITERAL | LONG_LITERAL | FLOAT_LITERAL | DOUBLE_LITERAL)

map ::= (LBRACK map_entry (COMMA map_entry)* RBRACK) | LBRACK RBRACK
map_entry ::= STRING_LITERAL POUND const_expr

bag ::= (LBRACE tuple (COMMA tuple)* RBRACE) | LBRACE RBRACE

tuple ::= (LPARENTH literal (COMMA literal)* RPARENTH) | LPARENTH RPARENTH

rel ::= alias
      | LPARENTH (foreach_clause_complex | ((op_clause | foreach_clause_simple) parallel_clause?)) RPARENTH

filename ::= STRING_LITERAL

//relational operators
rel_op ::= rel_op_eq
         | rel_op_ne
         | rel_op_gt
         | rel_op_gte
         | rel_op_lt
         | rel_op_lte
         | STR_OP_MATCHES

rel_op_eq ::= STR_OP_EQ | EQEQ
rel_op_ne ::= STR_OP_NE | NOTEQ
rel_op_gt ::= STR_OP_GT | GT
rel_op_gte ::= STR_OP_GTE | GTEQ
rel_op_lt ::= STR_OP_LT | LT
rel_op_lte ::= STR_OP_LTE | LTEQ

// TODO figure out how to do comments so they don't get caught in each rule but still are syntax highlighted
comment ::= (C_STYLE_COMMENT |
             DOC_COMMENT |
             COMMENT_TAIL |
             END_OF_LINE_COMMENT
             )



//TODO figure out why these aren't being used
unused ::= DCOLON | SET_KEYWORD | IN_KEYWORD | RMF_KEYWORD

//other ::= ( EXEC_LITERAL | NULL_KEYWORD | AS_KEYWORD | ASC_KEYWORD | BAG_KEYWORD | BY_KEYWORD | CACHE_KEYWORD | CHARARRAY_KEYWORD | COGROUP_KEYWORD | CROSS_KEYWORD | DEFINE_KEYWORD | DESC_KEYWORD | DISTINCT_KEYWORD | DOUBLE_KEYWORD | FILTER_KEYWORD | FLATTEN_KEYWORD | FLOAT_KEYWORD | FOREACH_KEYWORD | FULL_KEYWORD | GENERATE_KEYWORD | GROUP_KEYWORD | IF_KEYWORD | IN_KEYWORD | INNER_KEYWORD | INPUT_KEYWORD | INT_KEYWORD | INTO_KEYWORD | IS_KEYWORD | JOIN_KEYWORD | LEFT_KEYWORD | LIMIT_KEYWORD | LONG_KEYWORD | MAP_KEYWORD | MAPREDUCE_KEYWORD | ONSCHEMA_KEYWORD | ORDER_KEYWORD | OUTER_KEYWORD | OUTPUT_KEYWORD | PARALLEL_KEYWORD | PARTITION_KEYWORD | RETURNS_KEYWORD | RIGHT_KEYWORD | SAMPLE_KEYWORD | SET_KEYWORD | SHIP_KEYWORD | SPLIT_KEYWORD | STDERROR_KEYWORD | STDIN_KEYWORD | STDOUT_KEYWORD | STORE_KEYWORD | STREAM_KEYWORD | THROUGH_KEYWORD | TUPLE_KEYWORD | UNION_KEYWORD | VOID_KEYWORD | AND_KEYWORD | NOT_KEYWORD | OR_KEYWORD | STR_OP_EQ | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_NE | STR_OP_MATCHES | LPARENTH | RPARENTH | LBRACE | RBRACE | LBRACK | RBRACK | COMMA | DOT | EQUAL | GT | LT | QMARK | COLON | EQEQ | LTEQ | GTEQ | NOTEQ | PLUS | MINUS | STAR | DIV | POUND | PERCENT | DOUBLE_PERIOD | DOLLAR | DCOLON | DOC_COMMENT | BOOLEAN_TRUE | END_OF_LINE_COMMENT | BOOLEAN_FALSE | C_STYLE_COMMENT)*
