C_STYLE_COMMENT | END_OF_LINE_COMMENT | DOC_COMMENT | LONG_LITERAL | INTEGER_LITERAL | FLOAT_LITERAL | DOUBLE_LITERAL | EXEC_LITERAL | STRING_LITERAL | TRUE_KEYWORD | FALSE_KEYWORD | NULL_KEYWORD | AS_KEYWORD | ASC_KEYWORD | BAG_KEYWORD | BY_KEYWORD | CACHE_KEYWORD | CHARARRAY_KEYWORD | COGROUP_KEYWORD | CROSS_KEYWORD | DEFINE_KEYWORD | DESC_KEYWORD | DISTINCT_KEYWORD | DOUBLE_KEYWORD | FILTER_KEYWORD | FLATTEN_KEYWORD | FLOAT_KEYWORD | FOREACH_KEYWORD | FULL_KEYWORD | GENERATE_KEYWORD | GROUP_KEYWORD | IF_KEYWORD | IMPORT_KEYWORD | IN_KEYWORD | INNER_KEYWORD | INPUT_KEYWORD | INT_KEYWORD | INTO_KEYWORD | IS_KEYWORD | JOIN_KEYWORD | LEFT_KEYWORD | LIMIT_KEYWORD | LOAD_KEYWORD | LONG_KEYWORD | MAP_KEYWORD | MAPREDUCE_KEYWORD | ONSCHEMA_KEYWORD | ORDER_KEYWORD | OUTER_KEYWORD | OUTPUT_KEYWORD | PARALLEL_KEYWORD | PARTITION_KEYWORD | RETURNS_KEYWORD | RIGHT_KEYWORD | SAMPLE_KEYWORD | SET_KEYWORD | SHIP_KEYWORD | SPLIT_KEYWORD | STDERROR_KEYWORD | STDIN_KEYWORD | STDOUT_KEYWORD | STORE_KEYWORD | STREAM_KEYWORD | THROUGH_KEYWORD | TUPLE_KEYWORD | UNION_KEYWORD | USING_KEYWORD | VOID_KEYWORD | AND_KEYWORD | NOT_KEYWORD | OR_KEYWORD | STR_OP_EQ | STR_OP_GT | STR_OP_LT | STR_OP_GTE | STR_OP_LTE | STR_OP_NE | STR_OP_MATCHES | IDENTIFIER | LPARENTH | RPARENTH | LBRACE | RBRACE | LBRACK | RBRACK | SEMICOLON | COMMA | DOT | EQUAL | GT | LT | QMARK | COLON | EQEQ | LTEQ | GTEQ | NOTEQ | PLUS | MINUS | STAR | DIV | POUND | PERCENT | DOUBLE_PERIOD | DOLLAR | DCOLON



IMPORT 'myjar.jar';

x = LOAD '/data/derived/blah#LATEST';
x = LOAD '/data/derived/blah#LATEST' USING com.linkedin.LiAvroStorage('date.range', 'num.days=40');

STORE x INTO '/mydata/' USING PigStorage();

DEFINE GetTreatment com.linkedin.GetTreatment('stuff');

z = GROUP a BY (first);

x = FILTER y BY (col1 == 'abc');

z = DISTINCT a PARALLEL 1;

Z = LIMIT a 10;

Z = SAMPLE a 10.0;

ORDER a BY col1 ASC;

X = CROSS A, B;

a = UNION a, b;

B = STREAM A THROUGH `stream.pl -n 5`;

B = MAPREDUCE 'wordcount.jar' STORE A INTO 'inputDir' LOAD 'outputDir' `org.myorg.WordCount inputDir outputDir`;

A = JOIN x BY col1, y BY col2 USING 'replicated';

A = FILTER a BY (col1 + (INT) col2) == 2;

/*
Things
*/




