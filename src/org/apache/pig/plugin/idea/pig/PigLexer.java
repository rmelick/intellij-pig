/* The following code was generated by JFlex 1.4.3 on 3/28/13 10:06 AM */

package org.apache.pig.plugin.idea.pig;
 
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.apache.pig.plugin.idea.pig.psi.PigTypes;
import com.intellij.psi.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/28/13 10:06 AM from the specification file
 * <tt>/Users/rmelick/src/PigPlugin/src/org/apache/pig/plugin/idea/pig/Pig.flex</tt>
 */
class PigLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGISTER = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\12\1\0\1\4\1\12\16\6\4\0\1\4\1\66"+
    "\1\0\1\67\1\70\1\35\1\0\1\25\1\52\1\53\1\10\1\22"+
    "\1\60\1\11\1\20\1\7\1\13\7\2\2\1\1\65\1\26\1\63"+
    "\1\61\1\62\1\64\1\0\1\32\1\3\1\36\1\17\1\21\1\16"+
    "\1\40\1\41\1\44\1\46\1\5\1\15\1\45\1\34\1\42\1\43"+
    "\1\51\1\30\1\33\1\27\1\31\1\50\1\47\1\14\1\37\1\5"+
    "\1\56\1\24\1\57\1\0\1\5\1\23\1\32\1\3\1\36\1\17"+
    "\1\21\1\16\1\40\1\41\1\44\1\46\1\5\1\15\1\45\1\34"+
    "\1\42\1\43\1\51\1\30\1\33\1\27\1\31\1\50\1\47\1\14"+
    "\1\37\1\5\1\54\1\0\1\55\1\0\41\6\2\0\4\5\4\0"+
    "\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0"+
    "\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0"+
    "\1\5\21\0\130\6\5\0\23\6\12\0\1\5\13\0\1\5\1\0"+
    "\3\5\1\0\1\5\1\0\24\5\1\0\54\5\1\0\46\5\1\0"+
    "\5\5\4\0\202\5\1\0\4\6\3\0\105\5\1\0\46\5\2\0"+
    "\2\5\6\0\20\5\41\0\46\5\2\0\1\5\7\0\47\5\11\0"+
    "\21\6\1\0\27\6\1\0\3\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\13\0\33\5\5\0\3\5\15\0\4\6\14\0\6\6\13\0"+
    "\32\5\5\0\13\5\16\6\7\0\12\6\4\0\2\5\1\6\143\5"+
    "\1\0\1\5\10\6\1\0\6\6\2\5\2\6\1\0\4\6\2\5"+
    "\12\6\3\5\2\0\1\5\17\0\1\6\1\5\1\6\36\5\33\6"+
    "\2\0\3\5\60\0\46\5\13\6\1\5\u014f\0\3\6\66\5\2\0"+
    "\1\6\1\5\20\6\2\0\1\5\4\6\3\0\12\5\2\6\2\0"+
    "\12\6\21\0\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0"+
    "\2\6\2\0\3\6\11\0\1\6\4\0\2\5\1\0\3\5\2\6"+
    "\2\0\12\6\4\5\15\0\3\6\1\0\6\5\4\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0"+
    "\1\6\1\0\5\6\4\0\2\6\2\0\3\6\13\0\4\5\1\0"+
    "\1\5\7\0\14\6\3\5\14\0\3\6\1\0\11\5\1\0\3\5"+
    "\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6"+
    "\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5\17\0\2\5"+
    "\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0"+
    "\1\6\1\5\6\6\3\0\2\6\2\0\3\6\10\0\2\6\4\0"+
    "\2\5\1\0\3\5\4\0\12\6\1\0\1\5\20\0\1\6\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5\1\0\3\5"+
    "\4\0\5\6\3\0\3\6\1\0\4\6\11\0\1\6\17\0\11\6"+
    "\11\0\1\5\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\4\0\7\6\1\0\3\6\1\0\4\6"+
    "\7\0\2\6\11\0\2\5\4\0\12\6\22\0\2\6\1\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\2\0\1\6"+
    "\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6\7\0\1\5"+
    "\1\0\2\5\4\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\20\5\4\0\6\6\2\0\3\6\1\0\4\6"+
    "\11\0\1\6\10\0\2\5\4\0\12\6\22\0\2\6\1\0\22\5"+
    "\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6"+
    "\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5"+
    "\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5"+
    "\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5"+
    "\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5"+
    "\1\0\4\5\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5"+
    "\1\0\1\5\1\0\6\6\2\0\12\6\2\0\2\5\42\0\1\5"+
    "\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6"+
    "\4\0\2\6\10\5\1\0\42\5\6\0\24\6\1\0\2\6\4\5"+
    "\4\0\10\6\1\0\44\6\11\0\1\6\71\0\42\5\1\0\5\5"+
    "\1\0\2\5\1\0\7\6\3\0\4\6\6\0\12\6\6\0\6\5"+
    "\4\6\106\0\46\5\12\0\51\5\7\0\132\5\5\0\104\5\5\0"+
    "\122\5\6\0\7\5\1\0\77\5\1\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\47\5\1\0\1\5\1\0"+
    "\4\5\2\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\7\5\1\0\7\5\1\0\27\5\1\0"+
    "\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\47\5\1\0"+
    "\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5\2\0\10\5\12\0"+
    "\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\6"+
    "\13\0\22\5\3\6\13\0\22\5\2\6\14\0\15\5\1\0\3\5"+
    "\1\0\2\6\14\0\64\5\40\6\3\0\1\5\3\0\2\5\1\6"+
    "\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\5\10\0\51\5"+
    "\1\6\126\0\35\5\3\0\14\6\4\0\14\6\12\0\12\6\36\5"+
    "\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5\6\0\26\5"+
    "\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5"+
    "\4\0\15\5\5\0\3\5\1\0\7\5\17\0\4\6\32\0\5\6"+
    "\20\0\2\5\23\0\1\5\13\0\4\6\6\0\6\6\1\0\1\5"+
    "\15\0\1\5\40\0\22\5\36\0\15\6\4\0\1\6\3\0\6\6"+
    "\27\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5"+
    "\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\3\5"+
    "\1\0\7\5\3\0\3\5\5\0\5\5\26\0\44\5\u0e81\0\3\5"+
    "\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0\126\5\2\0"+
    "\2\6\2\0\3\5\1\0\137\5\5\0\50\5\4\0\136\5\21\0"+
    "\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0"+
    "\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\5\14\0\5\5\5\0"+
    "\1\5\1\6\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0"+
    "\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0"+
    "\66\5\50\0\15\5\3\0\20\6\20\0\4\6\17\0\2\5\30\0"+
    "\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0"+
    "\1\5\13\0\12\6\7\0\32\5\4\0\1\5\1\0\32\5\12\0"+
    "\132\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0"+
    "\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\1\6"+
    "\1\7\1\10\1\3\3\4\1\11\1\4\1\12\1\13"+
    "\1\2\1\14\1\15\6\4\1\16\10\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\2\1\33\1\1\1\34\1\35\1\36"+
    "\3\37\1\4\1\40\1\41\1\42\1\0\2\3\1\4"+
    "\1\43\12\4\1\44\1\45\2\13\1\46\2\14\11\4"+
    "\1\47\11\4\1\0\5\4\1\50\2\4\1\51\3\4"+
    "\1\52\1\53\1\54\4\4\1\55\1\56\1\57\1\60"+
    "\1\61\1\37\1\62\1\41\1\63\1\4\1\64\23\4"+
    "\1\65\2\4\1\66\1\67\1\70\1\71\1\72\6\4"+
    "\1\73\1\4\1\74\1\0\5\4\1\75\6\4\1\76"+
    "\4\4\1\77\2\4\1\0\2\63\1\100\1\101\1\102"+
    "\3\4\1\103\4\4\1\104\2\4\1\105\15\4\1\106"+
    "\1\4\1\107\2\0\15\4\1\110\5\4\1\111\1\112"+
    "\1\41\1\0\1\113\1\4\1\114\1\115\5\4\1\116"+
    "\3\4\1\117\1\120\1\121\2\4\1\122\1\4\1\123"+
    "\1\4\1\124\2\0\1\125\1\126\3\4\1\127\1\4"+
    "\1\130\1\131\4\4\1\132\1\133\5\4\1\134\1\135"+
    "\1\136\4\4\1\137\1\140\1\141\1\142\2\0\4\4"+
    "\1\143\3\4\1\144\2\4\1\145\1\146\1\4\1\147"+
    "\1\150\1\4\2\0\1\4\1\151\5\4\1\152\1\4"+
    "\1\153\1\154\1\155\1\156\1\4\1\157\1\4\1\160"+
    "\1\4\1\161\1\4\1\162\1\163\1\164\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\162\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\162\0\u0357\0\u0390\0\u03c9\0\162\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\162\0\u0759\0\u0792\0\u07cb\0\162\0\u0804"+
    "\0\u083d\0\162\0\u0876\0\162\0\162\0\162\0\162\0\u08af"+
    "\0\u08e8\0\u0921\0\u0156\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\162\0\u0156\0\162\0\u0d23"+
    "\0\162\0\u0d5c\0\162\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u0156\0\u0156\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\162\0\162\0\162\0\162\0\162\0\u15d2"+
    "\0\u0156\0\u160b\0\u1644\0\u167d\0\u0156\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8"+
    "\0\u0156\0\u1af1\0\u1b2a\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u0156\0\u1cb9"+
    "\0\u0156\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u0156"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f"+
    "\0\162\0\u0156\0\u0156\0\u0156\0\u21d8\0\u2211\0\u224a\0\u0156"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u0156\0\u2367\0\u23a0\0\u0156"+
    "\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568"+
    "\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u0156\0\u26be\0\u0156"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u0156"+
    "\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u0156\0\u0156\0\162"+
    "\0\u2b6b\0\u0156\0\u2ba4\0\u0156\0\u0156\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u0156\0\u2cfa\0\u2d33\0\u2d6c\0\u0156\0\u0156"+
    "\0\u0156\0\u2da5\0\u2dde\0\u0156\0\u2e17\0\u0156\0\u2e50\0\u0156"+
    "\0\u2e89\0\u2ec2\0\u0156\0\u0156\0\u2efb\0\u2f34\0\u2f6d\0\u0156"+
    "\0\u2fa6\0\u0156\0\u0156\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u0156"+
    "\0\u0156\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u0156\0\u0156"+
    "\0\u0156\0\u31e0\0\u3219\0\u3252\0\u328b\0\u0156\0\u0156\0\u0156"+
    "\0\u0156\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u0156"+
    "\0\u341a\0\u3453\0\u348c\0\u0156\0\u34c5\0\u34fe\0\u0156\0\u0156"+
    "\0\u3537\0\u0156\0\u0156\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u0156"+
    "\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u0156\0\u3771\0\u0156"+
    "\0\u0156\0\162\0\162\0\u37aa\0\u0156\0\u37e3\0\u0156\0\u381c"+
    "\0\u0156\0\u3855\0\u0156\0\u0156\0\u0156\0\u0156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\3\1\10\1\11"+
    "\1\12\1\6\1\13\1\7\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\7\1\36"+
    "\1\7\1\37\1\40\1\41\1\42\1\43\1\7\1\44"+
    "\1\7\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\7"+
    "\26\63\1\64\42\63\72\0\2\4\10\0\1\4\1\0"+
    "\1\65\1\66\1\67\1\70\1\71\50\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\3\7\1\72"+
    "\2\7\1\0\1\7\1\73\12\7\16\0\1\7\4\0"+
    "\1\6\5\0\1\6\57\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\6\7\1\0\14\7\16\0"+
    "\1\7\10\0\1\74\71\0\1\75\60\0\1\76\1\77"+
    "\10\0\1\77\1\100\1\65\1\66\1\67\1\70\1\71"+
    "\50\0\3\7\1\0\2\7\4\0\5\7\1\0\1\101"+
    "\5\0\1\102\5\7\1\0\4\7\1\103\1\7\1\104"+
    "\5\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\2\7\1\105\2\7\1\0\1\7\5\0\2\7\1\106"+
    "\1\107\2\7\1\0\4\7\1\110\1\7\1\111\5\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\112\5\0\6\7\1\0\4\7\1\113\1\7"+
    "\1\114\5\7\16\0\1\7\1\0\2\70\10\0\1\70"+
    "\4\0\1\115\51\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\6\7\1\0\13\7\1\116\16\0"+
    "\1\7\12\22\1\0\10\22\1\117\1\120\44\22\70\0"+
    "\1\121\12\24\1\0\11\24\1\122\1\123\43\24\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\1\7\1\124\1\125\3\7\1\0\3\7\1\126\10\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\127\5\0\6\7\1\0\6\7\1\130\1\131"+
    "\4\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\4\7\1\132\1\133\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\2\7\1\134\2\7\1\0\1\7\5\0\4\7\1\135"+
    "\1\136\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\137\5\0\1\140\2\7"+
    "\1\141\2\7\1\0\3\7\1\142\1\7\1\143\6\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\144\5\0\2\7\1\145\3\7\1\0\4\7"+
    "\1\146\7\7\16\0\1\7\17\0\1\147\52\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\1\7"+
    "\1\150\1\7\1\151\2\7\1\0\3\7\1\152\1\153"+
    "\7\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\154\5\0\1\155\1\156\4\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\1\157\1\160\1\161\2\7"+
    "\1\162\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\3\7\1\163"+
    "\2\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\3\7\1\164\1\7\1\0\1\7\5\0"+
    "\4\7\1\165\1\166\1\0\7\7\1\167\4\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\3\7\1\170\2\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\6\7\1\0\4\7\1\171\7\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\6\7\1\0\4\7\1\172\7\7\16\0"+
    "\1\7\61\0\1\173\70\0\1\174\70\0\1\175\74\0"+
    "\1\176\64\0\1\177\7\0\26\63\1\0\42\63\1\0"+
    "\2\70\10\0\1\70\2\0\1\66\1\67\1\0\1\71"+
    "\50\0\2\200\6\0\1\200\1\0\1\200\2\0\1\66"+
    "\1\67\2\0\1\200\47\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\6\7\1\0\2\7\1\201"+
    "\11\7\16\0\1\7\10\202\1\203\60\202\12\75\1\0"+
    "\56\75\1\0\2\76\10\0\1\76\2\0\1\66\1\67"+
    "\1\70\1\71\50\0\1\76\1\77\10\0\1\77\1\0"+
    "\1\65\1\66\1\67\1\70\1\71\50\0\3\100\7\0"+
    "\1\100\1\0\1\65\2\100\1\0\1\100\10\0\1\100"+
    "\3\0\1\100\33\0\3\7\1\0\2\7\4\0\3\7"+
    "\1\204\1\7\1\0\1\7\5\0\6\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\205\5\0\6\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\3\7\1\206\1\7\1\207\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\6\7\1\0\7\7\1\210\4\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\3\7\1\211\2\7\1\0\4\7\1\212"+
    "\7\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\2\7\1\213\2\7\1\0\1\7\5\0\6\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\2\7\1\214\2\7\1\0\1\7\5\0\6\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\1\7\1\215\4\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\2\7\1\216\2\7\1\0\1\7\5\0\6\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\3\7\1\217\1\7\1\0\1\7\5\0\4\7\1\220"+
    "\1\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\2\7\1\221"+
    "\3\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\4\7\1\222"+
    "\1\7\1\0\14\7\16\0\1\7\12\22\1\0\56\22"+
    "\12\24\1\0\56\24\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\2\7\1\223\3\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\6\7\1\0\5\7\1\224"+
    "\6\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\1\7\1\225\4\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\1\226\5\7\1\0\2\7"+
    "\1\227\11\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\2\7"+
    "\1\230\11\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\3\7\1\231\1\7\1\0\1\7\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\6\7"+
    "\1\232\5\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\6\7"+
    "\1\233\5\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\2\7\1\234\2\7\1\0\1\7\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\1\235"+
    "\13\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\4\7\1\236\1\0\1\7\5\0\6\7\1\0\1\7"+
    "\1\237\12\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\1\240\5\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\4\7\1\241\1\0\1\7\5\0\1\7\1\242\4\7"+
    "\1\0\4\7\1\243\7\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\7\7\1\244\4\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\6\7\1\245\5\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\2\7\1\246\2\7\1\0\1\7"+
    "\5\0\6\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\13\7\1\247\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\2\7\1\250\2\7\1\0\1\7\5\0"+
    "\6\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\1\251\5\7"+
    "\1\0\14\7\16\0\1\7\21\0\1\252\50\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\4\7\1\253\7\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\1\254\13\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\3\7\1\255"+
    "\2\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\6\7\1\0"+
    "\2\7\1\256\11\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\5\7\1\257"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\260\5\0\6\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\6\7\1\0\4\7\1\261\7\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\6\7\1\0\3\7\1\262\10\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\4\7"+
    "\1\263\1\0\1\7\5\0\6\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\1\264\5\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\4\7\1\265\1\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\266\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\267\4\7\1\270\1\0\5\7\1\271\6\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\6\7\1\0\5\7\1\272\6\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\1\273\5\7\1\0\5\7\1\274"+
    "\6\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\6\7\1\0\6\7\1\275"+
    "\5\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\6\7\1\0\6\7\1\276"+
    "\5\7\16\0\1\7\1\0\2\200\10\0\1\200\2\0"+
    "\1\66\1\67\51\0\10\202\1\277\60\202\7\300\1\301"+
    "\1\203\60\300\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\1\302\5\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\4\7\1\303"+
    "\1\0\1\7\5\0\6\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\2\7\1\304\11\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\6\7\1\305\5\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\306\5\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\3\7\1\307\2\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\2\7\1\310\2\7\1\0"+
    "\1\7\5\0\6\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\4\7\1\311\1\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\312\5\0"+
    "\6\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\1\313\5\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\6\7"+
    "\1\314\5\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\1\315"+
    "\13\7\16\0\1\7\1\0\2\7\1\316\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\1\317\5\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\320\5\0\6\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\2\7\1\321\2\7\1\0"+
    "\1\7\5\0\6\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\4\7\1\322\7\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\2\7\1\323\3\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\6\7\1\324\5\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\3\7\1\325\10\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\5\7\1\326\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\4\7\1\327\7\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\330\5\0\6\7"+
    "\1\0\4\7\1\331\1\7\1\332\5\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\333"+
    "\5\0\6\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\1\7"+
    "\1\334\4\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\5\7\1\335\6\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\5\7\1\336\6\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\6\7\1\337\5\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\2\7\1\340\2\7\1\0\1\7"+
    "\5\0\6\7\1\0\14\7\16\0\1\7\16\0\1\341"+
    "\17\0\1\342\33\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\4\7\1\343\1\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\6\7\1\0\3\7\1\344\10\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\1\7\1\345\4\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\1\7\1\346\4\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\347\5\0\6\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\2\7\1\350\3\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\351"+
    "\5\0\6\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\352\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\353\5\0\6\7\1\0\5\7"+
    "\1\354\6\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\1\355"+
    "\13\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\1\356\2\7\1\357\2\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\6\7\1\0\4\7"+
    "\1\360\7\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\361\5\0\6\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\2\7\1\362\3\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\6\7\1\0\4\7\1\363\7\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\6\7\1\0\1\364\13\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\1\7\1\365\4\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\5\7\1\366\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\4\7\1\367\1\0"+
    "\1\7\5\0\6\7\1\0\14\7\16\0\1\7\7\202"+
    "\1\370\1\277\60\202\10\300\1\371\60\300\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\1\372"+
    "\5\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\1\373\5\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\1\374\5\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\375\5\0\6\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\3\7\1\376\2\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\377\5\0\6\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\5\7\1\u0100\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\2\7\1\u0101\2\7\1\0\1\7"+
    "\5\0\6\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\6\7\1\u0102\5\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\u0103\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\2\7\1\u0104\3\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\1\7\1\u0105\4\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\4\7\1\u0106\1\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\1\u0107\5\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\6\7\1\0\2\7\1\u0108"+
    "\11\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\5\7\1\u0109\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\1\7\1\u010a\4\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\2\7\1\u010b\3\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\5\7\1\u010c\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\3\7\1\u010d\2\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\u010e\5\0\6\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\2\7\1\u010f\2\7\1\0"+
    "\1\7\5\0\6\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\1\u0110\5\7\1\0\14\7\16\0\1\7\32\0\1\u0111"+
    "\53\0\1\u0112\54\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\4\7\1\u0113\1\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\u0114\5\0\6\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\3\7\1\u0115\2\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\4\7\1\u0116\7\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\u0117\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\5\7\1\u0118\6\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\u0119\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\u011a\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\u011b\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\2\7\1\u011c\3\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\3\7\1\u011d\10\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\6\7\1\u011e\5\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\2\7\1\u011f\2\7"+
    "\1\0\1\7\5\0\6\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\u0120\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\u0121\5\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\1\7\1\u0122\4\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\3\7\1\u0123\10\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\u0124\5\0"+
    "\6\7\1\0\14\7\16\0\1\7\7\300\1\301\1\371"+
    "\60\300\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\u0125\5\0\6\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\1\u0126\13\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\1\7"+
    "\1\u0127\4\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\u0128\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\u0129\5\0\6\7\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\7\5\0\5\7\1\u012a\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\6\7\1\0\2\7\1\u012b\11\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\5\7\1\0"+
    "\1\7\5\0\5\7\1\u012c\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\u012d\5\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\1\7\1\u012e\4\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\1\u012f\5\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\7\7\1\u0130\4\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\u0131\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\31\0\1\u0132\71\0\1\u0133"+
    "\37\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\u0134\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\2\7\1\u0135\3\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\3\7\1\u0136\2\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\11\7\1\u0137\2\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\u0138\5\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\u0139\5\0"+
    "\6\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\1\u013a\5\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\2\7\1\u013b\2\7\1\0\1\7\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\1\u013c\5\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\u013d\5\0\6\7\1\0\14\7\16\0"+
    "\1\7\1\0\3\7\1\0\2\7\4\0\4\7\1\u013e"+
    "\1\0\1\7\5\0\6\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\5\7\1\u013f\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\3\7\1\u0140\10\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\1\u0141\13\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\3\7\1\u0142\10\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\4\7"+
    "\1\u0143\1\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\u0144\5\0\6\7"+
    "\1\0\14\7\16\0\1\7\15\0\1\u0145\103\0\1\u0146"+
    "\41\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\7\1\u0147\4\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\6\7\1\0\5\7\1\u0148\6\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\1\u0149\5\7\1\0\14\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\6\7\1\u014a\5\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\7\7\1\u014b\4\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\7\5\0"+
    "\6\7\1\0\6\7\1\u014c\5\7\16\0\1\7\1\0"+
    "\3\7\1\0\2\7\4\0\5\7\1\0\1\u014d\5\0"+
    "\6\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\4\7\1\u014e"+
    "\1\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\2\7\1\u014f"+
    "\3\7\1\0\14\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\1\u0150\5\7"+
    "\1\0\14\7\16\0\1\7\1\0\3\7\1\0\2\7"+
    "\4\0\5\7\1\0\1\7\5\0\1\7\1\u0151\4\7"+
    "\1\0\14\7\16\0\1\7\27\0\1\u0152\62\0\1\u0153"+
    "\50\0\3\7\1\0\2\7\4\0\5\7\1\0\1\7"+
    "\5\0\3\7\1\u0154\2\7\1\0\14\7\16\0\1\7"+
    "\1\0\3\7\1\0\2\7\4\0\5\7\1\0\1\u0155"+
    "\5\0\6\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\4\7"+
    "\1\u0156\1\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\3\7"+
    "\1\u0157\2\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\4\7\1\u0158\7\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\2\7\1\u0159\2\7\1\0\1\7"+
    "\5\0\6\7\1\0\14\7\16\0\1\7\1\0\3\7"+
    "\1\0\2\7\4\0\5\7\1\0\1\7\5\0\6\7"+
    "\1\0\1\u015a\13\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\7\5\0\6\7\1\0"+
    "\1\7\1\u015b\12\7\16\0\1\7\1\0\3\7\1\0"+
    "\2\7\4\0\5\7\1\0\1\u015c\5\0\6\7\1\0"+
    "\14\7\16\0\1\7\1\0\3\7\1\0\2\7\4\0"+
    "\5\7\1\0\1\7\5\0\5\7\1\u015d\1\0\14\7"+
    "\16\0\1\7\1\0\3\7\1\0\2\7\4\0\5\7"+
    "\1\0\1\u015e\5\0\6\7\1\0\14\7\16\0\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\5\1\1\11\7\1\1\11\3\1"+
    "\1\11\17\1\7\11\3\1\1\11\2\1\1\11\1\1"+
    "\4\11\6\1\1\0\16\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\23\1\1\0\23\1\5\11\52\1"+
    "\1\0\24\1\1\0\1\1\1\11\37\1\2\0\25\1"+
    "\1\11\1\0\27\1\2\0\37\1\2\0\21\1\2\0"+
    "\13\1\2\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  PigLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PigLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1812) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 87: 
          { return PigTypes.GROUP_KEYWORD;
          }
        case 118: break;
        case 41: 
          { return PigTypes.OR_KEYWORD;
          }
        case 119: break;
        case 56: 
          { return PigTypes.AND_KEYWORD;
          }
        case 120: break;
        case 111: 
          { return PigTypes.GENERATE_KEYWORD;
          }
        case 121: break;
        case 100: 
          { return PigTypes.IMPORT_KEYWORD;
          }
        case 122: break;
        case 63: 
          { return PigTypes.MAP_KEYWORD;
          }
        case 123: break;
        case 98: 
          { return PigTypes.SAMPLE_KEYWORD;
          }
        case 124: break;
        case 72: 
          { return PigTypes.INTO_KEYWORD;
          }
        case 125: break;
        case 113: 
          { return PigTypes.PARALLEL_KEYWORD;
          }
        case 126: break;
        case 110: 
          { return PigTypes.DECLARE_COMMAND;
          }
        case 127: break;
        case 39: 
          { return PigTypes.AS_KEYWORD;
          }
        case 128: break;
        case 104: 
          { return PigTypes.RETURNS_KEYWORD;
          }
        case 129: break;
        case 68: 
          { return PigTypes.DESC_KEYWORD;
          }
        case 130: break;
        case 71: 
          { return PigTypes.NULL_KEYWORD;
          }
        case 131: break;
        case 57: 
          { return PigTypes.ANY_KEYWORD;
          }
        case 132: break;
        case 38: 
          { return PigTypes.DOLLAR;
          }
        case 133: break;
        case 117: 
          { return PigTypes.MAPREDUCE_KEYWORD;
          }
        case 134: break;
        case 16: 
          { return PigTypes.RPARENTH;
          }
        case 135: break;
        case 37: 
          { return PigTypes.STR_OP_EQ;
          }
        case 136: break;
        case 43: 
          { return PigTypes.IS_KEYWORD;
          }
        case 137: break;
        case 115: 
          { return PigTypes.OTHERWISE_KEYWORD;
          }
        case 138: break;
        case 24: 
          { return PigTypes.LT;
          }
        case 139: break;
        case 14: 
          { return PigTypes.PERCENT;
          }
        case 140: break;
        case 96: 
          { return PigTypes.STDOUT_KEYWORD;
          }
        case 141: break;
        case 18: 
          { return PigTypes.RBRACE;
          }
        case 142: break;
        case 108: 
          { yybegin(REGISTER); return PigTypes.REGISTER_KEYWORD;
          }
        case 143: break;
        case 82: 
          { return PigTypes.STDIN_KEYWORD;
          }
        case 144: break;
        case 112: 
          { return PigTypes.ONSCHEMA_KEYWORD;
          }
        case 145: break;
        case 20: 
          { return PigTypes.RBRACK;
          }
        case 146: break;
        case 11: 
          { return PigTypes.EXEC_LITERAL;
          }
        case 147: break;
        case 46: 
          { return PigTypes.GTEQ;
          }
        case 148: break;
        case 105: 
          { return PigTypes.COGROUP_KEYWORD;
          }
        case 149: break;
        case 75: 
          { return PigTypes.LIMIT_KEYWORD;
          }
        case 150: break;
        case 58: 
          { return PigTypes.SET_KEYWORD;
          }
        case 151: break;
        case 25: 
          { return PigTypes.QMARK;
          }
        case 152: break;
        case 65: 
          { return PigTypes.LOAD_KEYWORD;
          }
        case 153: break;
        case 5: 
          { return TokenType.WHITE_SPACE;
          }
        case 154: break;
        case 109: 
          { return PigTypes.DEFAULT_COMMAND;
          }
        case 155: break;
        case 103: 
          { return PigTypes.THROUGH_KEYWORD;
          }
        case 156: break;
        case 64: 
          { return PigTypes.LEFT_KEYWORD;
          }
        case 157: break;
        case 47: 
          { return PigTypes.LTEQ;
          }
        case 158: break;
        case 42: 
          { return PigTypes.IF_KEYWORD;
          }
        case 159: break;
        case 91: 
          { return PigTypes.INPUT_KEYWORD;
          }
        case 160: break;
        case 17: 
          { return PigTypes.LBRACE;
          }
        case 161: break;
        case 8: 
          { return PigTypes.MINUS;
          }
        case 162: break;
        case 49: 
          { return PigTypes.NOTEQ;
          }
        case 163: break;
        case 23: 
          { return PigTypes.GT;
          }
        case 164: break;
        case 15: 
          { return PigTypes.LPARENTH;
          }
        case 165: break;
        case 107: 
          { return PigTypes.DISTINCT_KEYWORD;
          }
        case 166: break;
        case 19: 
          { return PigTypes.LBRACK;
          }
        case 167: break;
        case 51: 
          { return PigTypes.DOC_COMMENT;
          }
        case 168: break;
        case 79: 
          { return PigTypes.RIGHT_KEYWORD;
          }
        case 169: break;
        case 62: 
          { return PigTypes.INT_KEYWORD;
          }
        case 170: break;
        case 90: 
          { return PigTypes.INNER_KEYWORD;
          }
        case 171: break;
        case 85: 
          { return PigTypes.CROSS_KEYWORD;
          }
        case 172: break;
        case 55: 
          { return PigTypes.ASC_KEYWORD;
          }
        case 173: break;
        case 54: 
          { return PigTypes.ALL_KEYWORD;
          }
        case 174: break;
        case 35: 
          { return PigTypes.STR_OP_LT;
          }
        case 175: break;
        case 27: 
          { return PigTypes.POUND;
          }
        case 176: break;
        case 22: 
          { return PigTypes.EQUAL;
          }
        case 177: break;
        case 10: 
          { return PigTypes.PLUS;
          }
        case 178: break;
        case 31: 
          { return PigTypes.DOUBLE_LITERAL;
          }
        case 179: break;
        case 95: 
          { return PigTypes.STDERROR_KEYWORD;
          }
        case 180: break;
        case 3: 
          { return PigTypes.INTEGER_LITERAL;
          }
        case 181: break;
        case 4: 
          { return PigTypes.IDENTIFIER;
          }
        case 182: break;
        case 45: 
          { return PigTypes.EQEQ;
          }
        case 183: break;
        case 74: 
          { return PigTypes.VOID_KEYWORD;
          }
        case 184: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 185: break;
        case 44: 
          { return PigTypes.IN_KEYWORD;
          }
        case 186: break;
        case 26: 
          { return PigTypes.COLON;
          }
        case 187: break;
        case 30: 
          { return PigTypes.FLOAT_LITERAL;
          }
        case 188: break;
        case 6: 
          { return PigTypes.DIV;
          }
        case 189: break;
        case 12: 
          { return PigTypes.STRING_LITERAL;
          }
        case 190: break;
        case 32: 
          { return PigTypes.BY_KEYWORD;
          }
        case 191: break;
        case 40: 
          { return PigTypes.STR_OP_GT;
          }
        case 192: break;
        case 114: 
          { return PigTypes.CHARARRAY_KEYWORD;
          }
        case 193: break;
        case 83: 
          { return PigTypes.STORE_KEYWORD;
          }
        case 194: break;
        case 28: 
          { throw new Error("Illegal character <"+
                                                    yytext()+">" + "in state" + yystate());
          }
        case 195: break;
        case 92: 
          { return PigTypes.FILTER_KEYWORD;
          }
        case 196: break;
        case 88: 
          { return PigTypes.ORDER_KEYWORD;
          }
        case 197: break;
        case 102: 
          { return PigTypes.FOREACH_KEYWORD;
          }
        case 198: break;
        case 89: 
          { return PigTypes.OUTER_KEYWORD;
          }
        case 199: break;
        case 50: 
          { return PigTypes.BAG_KEYWORD;
          }
        case 200: break;
        case 84: 
          { return PigTypes.SPLIT_KEYWORD;
          }
        case 201: break;
        case 69: 
          { return PigTypes.BOOLEAN_TRUE;
          }
        case 202: break;
        case 78: 
          { return PigTypes.TUPLE_KEYWORD;
          }
        case 203: break;
        case 53: 
          { return PigTypes.RMF_KEYWORD;
          }
        case 204: break;
        case 29: 
          { return PigTypes.LONG_LITERAL;
          }
        case 205: break;
        case 67: 
          { return PigTypes.FULL_KEYWORD;
          }
        case 206: break;
        case 9: 
          { return PigTypes.DOT;
          }
        case 207: break;
        case 34: 
          { return PigTypes.END_OF_LINE_COMMENT;
          }
        case 208: break;
        case 13: 
          { return PigTypes.SEMICOLON;
          }
        case 209: break;
        case 21: 
          { return PigTypes.COMMA;
          }
        case 210: break;
        case 94: 
          { return PigTypes.DOUBLE_KEYWORD;
          }
        case 211: break;
        case 106: 
          { return PigTypes.STR_OP_MATCHES;
          }
        case 212: break;
        case 86: 
          { return PigTypes.CACHE_KEYWORD;
          }
        case 213: break;
        case 99: 
          { return PigTypes.OUTPUT_KEYWORD;
          }
        case 214: break;
        case 1: 
          { yybegin(YYINITIAL); return PigTypes.REGISTER_FILENAME;
          }
        case 215: break;
        case 77: 
          { return PigTypes.BOOLEAN_FALSE;
          }
        case 216: break;
        case 59: 
          { return PigTypes.STR_OP_NE;
          }
        case 217: break;
        case 93: 
          { return PigTypes.DEFINE_KEYWORD;
          }
        case 218: break;
        case 61: 
          { return PigTypes.STR_OP_GTE;
          }
        case 219: break;
        case 76: 
          { return PigTypes.FLOAT_KEYWORD;
          }
        case 220: break;
        case 73: 
          { return PigTypes.JOIN_KEYWORD;
          }
        case 221: break;
        case 33: 
          { return PigTypes.C_STYLE_COMMENT;
          }
        case 222: break;
        case 48: 
          { return PigTypes.DCOLON;
          }
        case 223: break;
        case 81: 
          { return PigTypes.UNION_KEYWORD;
          }
        case 224: break;
        case 116: 
          { return PigTypes.PARTITION_KEYWORD;
          }
        case 225: break;
        case 60: 
          { return PigTypes.NOT_KEYWORD;
          }
        case 226: break;
        case 7: 
          { return PigTypes.STAR;
          }
        case 227: break;
        case 101: 
          { return PigTypes.FLATTEN_KEYWORD;
          }
        case 228: break;
        case 80: 
          { return PigTypes.USING_KEYWORD;
          }
        case 229: break;
        case 36: 
          { return PigTypes.DOUBLE_PERIOD;
          }
        case 230: break;
        case 52: 
          { return PigTypes.STR_OP_LTE;
          }
        case 231: break;
        case 97: 
          { return PigTypes.STREAM_KEYWORD;
          }
        case 232: break;
        case 66: 
          { return PigTypes.LONG_KEYWORD;
          }
        case 233: break;
        case 70: 
          { return PigTypes.SHIP_KEYWORD;
          }
        case 234: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
