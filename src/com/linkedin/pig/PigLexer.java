/* The following code was generated by JFlex 1.4.3 on 3/23/13 12:01 AM */

package com.linkedin.pig;
 
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.linkedin.pig.psi.PigTypes;
import com.intellij.psi.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/23/13 12:01 AM from the specification file
 * <tt>/Users/rmelick/src/PigPlugin/src/com/linkedin/pig/Pig.flex</tt>
 */
class PigLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\12\1\0\1\4\1\12\16\6\4\0\1\4\1\72"+
    "\1\0\1\73\1\75\1\74\1\0\1\25\1\55\1\56\1\10\1\22"+
    "\1\64\1\11\1\20\1\7\1\13\7\2\2\1\1\71\1\63\1\67"+
    "\1\65\1\66\1\70\1\0\1\33\1\41\1\40\1\46\1\31\1\32"+
    "\1\42\1\43\1\47\1\51\1\5\1\34\1\50\1\36\1\44\1\45"+
    "\1\54\1\27\1\35\1\26\1\30\1\53\1\52\1\14\1\37\1\5"+
    "\1\61\1\24\1\62\1\0\1\5\1\23\3\3\1\17\1\21\1\16"+
    "\5\5\1\15\13\5\1\14\2\5\1\57\1\0\1\60\1\0\41\6"+
    "\2\0\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5"+
    "\5\0\27\5\1\0\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5"+
    "\16\0\5\5\11\0\1\5\21\0\130\6\5\0\23\6\12\0\1\5"+
    "\13\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\54\5"+
    "\1\0\46\5\1\0\5\5\4\0\202\5\1\0\4\6\3\0\105\5"+
    "\1\0\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5"+
    "\7\0\47\5\11\0\21\6\1\0\27\6\1\0\3\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\13\0\33\5\5\0\3\5\15\0\4\6"+
    "\14\0\6\6\13\0\32\5\5\0\13\5\16\6\7\0\12\6\4\0"+
    "\2\5\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6"+
    "\1\0\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5"+
    "\1\6\36\5\33\6\2\0\3\5\60\0\46\5\13\6\1\5\u014f\0"+
    "\3\6\66\5\2\0\1\6\1\5\20\6\2\0\1\5\4\6\3\0"+
    "\12\5\2\6\2\0\12\6\21\0\3\6\1\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6"+
    "\1\5\7\6\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\5"+
    "\1\0\3\5\2\6\2\0\12\6\4\5\15\0\3\6\1\0\6\5"+
    "\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5"+
    "\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6"+
    "\13\0\4\5\1\0\1\5\7\0\14\6\3\5\14\0\3\6\1\0"+
    "\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0"+
    "\1\5\17\0\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6"+
    "\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\5\5\2\0\1\6\1\5\6\6\3\0\2\6\2\0\3\6"+
    "\10\0\2\6\4\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5"+
    "\20\0\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0"+
    "\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0"+
    "\10\5\1\0\3\5\4\0\5\6\3\0\3\6\1\0\4\6\11\0"+
    "\1\6\17\0\11\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0"+
    "\3\5\1\0\27\5\1\0\12\5\1\0\5\5\4\0\7\6\1\0"+
    "\3\6\1\0\4\6\7\0\2\6\11\0\2\5\4\0\12\6\22\0"+
    "\2\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\7\0\1\5\1\0\2\5\4\0\12\6\22\0\2\6\1\0"+
    "\10\5\1\0\3\5\1\0\27\5\1\0\20\5\4\0\6\6\2\0"+
    "\3\6\1\0\4\6\11\0\1\6\10\0\2\5\4\0\12\6\22\0"+
    "\2\6\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0"+
    "\7\5\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0"+
    "\2\6\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0"+
    "\12\6\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0"+
    "\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6"+
    "\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0"+
    "\2\5\42\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0"+
    "\1\6\1\0\1\6\4\0\2\6\10\5\1\0\42\5\6\0\24\6"+
    "\1\0\2\6\4\5\4\0\10\6\1\0\44\6\11\0\1\6\71\0"+
    "\42\5\1\0\5\5\1\0\2\5\1\0\7\6\3\0\4\6\6\0"+
    "\12\6\6\0\6\5\4\6\106\0\46\5\12\0\51\5\7\0\132\5"+
    "\5\0\104\5\5\0\122\5\6\0\7\5\1\0\77\5\1\0\1\5"+
    "\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\47\5"+
    "\1\0\1\5\1\0\4\5\2\0\37\5\1\0\1\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\7\5"+
    "\1\0\27\5\1\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5"+
    "\1\0\47\5\1\0\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5"+
    "\2\0\10\5\12\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5"+
    "\1\0\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0"+
    "\15\5\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5"+
    "\3\0\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0"+
    "\130\5\10\0\51\5\1\6\126\0\35\5\3\0\14\6\4\0\14\6"+
    "\12\0\12\6\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0"+
    "\132\5\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0"+
    "\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0"+
    "\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0"+
    "\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\17\0"+
    "\4\6\32\0\5\6\20\0\2\5\23\0\1\5\13\0\4\6\6\0"+
    "\6\6\1\0\1\5\15\0\1\5\40\0\22\5\36\0\15\6\4\0"+
    "\1\6\3\0\6\6\27\0\1\5\4\0\1\5\2\0\12\5\1\0"+
    "\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5\26\0"+
    "\44\5\u0e81\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5"+
    "\4\0\126\5\2\0\2\6\2\0\3\5\1\0\137\5\5\0\50\5"+
    "\4\0\136\5\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5"+
    "\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\5"+
    "\14\0\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5"+
    "\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5"+
    "\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0\4\6"+
    "\17\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5"+
    "\2\0\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5"+
    "\1\0\32\5\12\0\132\5\3\0\6\5\2\0\6\5\2\0\6\5"+
    "\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\1\1\13\23\3\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\1\1\31\1\32\1\33"+
    "\1\34\3\35\1\36\1\37\1\0\2\2\1\40\2\12"+
    "\1\41\2\13\7\3\1\42\6\3\1\43\1\3\1\44"+
    "\20\3\1\45\1\46\3\3\1\47\6\3\1\50\1\51"+
    "\1\52\4\3\1\53\1\54\1\55\1\56\1\57\1\35"+
    "\1\36\1\60\15\3\1\61\1\62\1\63\1\64\1\65"+
    "\7\3\1\66\4\3\1\67\1\70\4\3\1\71\1\72"+
    "\13\3\1\73\4\3\1\74\2\3\1\0\2\60\1\75"+
    "\6\3\1\76\5\3\1\77\1\100\1\101\7\3\1\102"+
    "\1\3\1\103\16\3\1\104\2\3\1\105\5\3\1\106"+
    "\1\107\1\36\1\0\1\110\2\3\1\111\1\112\1\113"+
    "\1\114\1\3\1\115\2\3\1\116\1\3\1\117\2\3"+
    "\1\120\1\3\1\121\1\122\1\123\2\3\1\124\2\3"+
    "\1\125\1\126\7\3\1\127\1\130\7\3\1\131\1\132"+
    "\1\133\1\134\1\135\4\3\1\136\3\3\1\137\1\140"+
    "\1\3\1\141\2\3\1\142\1\143\1\144\1\145\1\3"+
    "\1\146\6\3\1\147\2\3\1\150\1\3\1\151\1\3"+
    "\1\152\1\153\1\3\1\154\1\155\1\156\1\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\76\0\u0174"+
    "\0\u01b2\0\u01f0\0\76\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\76\0\76\0\76\0\76\0\76\0\76\0\76"+
    "\0\76\0\u0782\0\u07c0\0\u07fe\0\76\0\u083c\0\u087a\0\76"+
    "\0\76\0\76\0\76\0\76\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\76\0\76\0\u0a6a\0\76\0\u0aa8"+
    "\0\76\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\272\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec"+
    "\0\u122a\0\u1268\0\272\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\272\0\272"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\76\0\76\0\76"+
    "\0\76\0\76\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\272\0\272\0\272\0\272\0\272\0\u1a66"+
    "\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\272\0\u1c18"+
    "\0\u1c56\0\u1c94\0\u1cd2\0\272\0\272\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\272\0\272\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0"+
    "\0\76\0\272\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454"+
    "\0\272\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\272\0\272"+
    "\0\272\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c"+
    "\0\272\0\u277a\0\272\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\272\0\u2b1c\0\u2b5a\0\272\0\u2b98\0\u2bd6\0\u2c14"+
    "\0\u2c52\0\u2c90\0\272\0\272\0\76\0\u2cce\0\272\0\u2d0c"+
    "\0\u2d4a\0\272\0\272\0\272\0\272\0\u2d88\0\272\0\u2dc6"+
    "\0\u2e04\0\272\0\u2e42\0\272\0\u2e80\0\u2ebe\0\272\0\u2efc"+
    "\0\272\0\272\0\272\0\u2f3a\0\u2f78\0\272\0\u2fb6\0\u2ff4"+
    "\0\272\0\272\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168"+
    "\0\u31a6\0\272\0\272\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc"+
    "\0\u331a\0\u3358\0\272\0\272\0\272\0\272\0\272\0\u3396"+
    "\0\u33d4\0\u3412\0\u3450\0\272\0\u348e\0\u34cc\0\u350a\0\272"+
    "\0\272\0\u3548\0\272\0\u3586\0\u35c4\0\272\0\272\0\272"+
    "\0\272\0\u3602\0\272\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\u3776\0\272\0\u37b4\0\u37f2\0\272\0\u3830\0\272\0\u386e"+
    "\0\272\0\272\0\u38ac\0\272\0\272\0\272\0\272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\4\1\2\1\6\1\7"+
    "\1\10\1\5\1\11\4\4\1\12\1\4\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\4\1\30\1\31\1\32\1\4"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\4\1\41"+
    "\1\4\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\4\77\0\2\3\10\0\1\3\1\0\1\62"+
    "\1\63\1\64\1\65\1\66\7\0\1\66\1\63\1\0"+
    "\1\62\11\0\1\64\30\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\27\4\20\0\1\4\4\0"+
    "\1\5\5\0\1\5\73\0\1\67\76\0\1\70\65\0"+
    "\1\71\1\72\10\0\1\72\1\73\1\62\1\63\1\64"+
    "\1\65\1\66\7\0\1\66\1\63\1\0\1\62\11\0"+
    "\1\64\30\0\2\65\10\0\1\65\4\0\1\74\55\0"+
    "\12\14\1\0\10\14\1\75\1\76\51\14\75\0\1\77"+
    "\12\16\1\0\11\16\1\100\1\101\50\16\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\102\1\103\12\4\1\104\11\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\3\4\1\105\15\4\1\106\5\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\7\4\1\107\1\110\16\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\26\4"+
    "\1\111\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\2\4\1\112\2\4\1\113"+
    "\1\114\7\4\1\115\2\4\1\116\5\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\6\4\1\117\1\120\1\121\16\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\122\2\4\1\123\12\4\1\124\2\4\1\125"+
    "\5\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\126\2\4\1\127\1\4"+
    "\1\130\7\4\1\131\1\4\1\132\7\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\2\4\1\133\1\134\12\4\1\135\10\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\136\3\4\1\137\7\4\1\140"+
    "\1\141\10\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\5\4\1\142\3\4"+
    "\1\143\15\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\144\1\145\1\4"+
    "\1\146\23\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\147\1\150\1\151"+
    "\5\4\1\152\16\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\5\4\1\153"+
    "\21\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\154\12\4\1\155"+
    "\2\4\1\156\5\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\4\4\1\157"+
    "\2\4\1\160\1\161\11\4\1\162\4\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\163\21\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\16\4"+
    "\1\164\10\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\16\4\1\165\10\4"+
    "\20\0\1\4\65\0\1\166\75\0\1\167\75\0\1\170"+
    "\101\0\1\171\71\0\1\172\11\0\2\65\10\0\1\65"+
    "\2\0\1\63\1\64\1\0\1\66\7\0\1\66\1\63"+
    "\13\0\1\64\30\0\2\173\6\0\1\173\1\0\1\173"+
    "\2\0\1\63\1\64\2\0\1\173\7\0\1\63\13\0"+
    "\1\64\27\0\10\174\1\175\65\174\12\70\1\0\63\70"+
    "\1\0\2\71\10\0\1\71\2\0\1\63\1\64\1\65"+
    "\1\66\7\0\1\66\1\63\13\0\1\64\30\0\1\71"+
    "\1\72\10\0\1\72\1\0\1\62\1\63\1\64\1\65"+
    "\1\66\7\0\1\66\1\63\1\0\1\62\11\0\1\64"+
    "\30\0\3\73\7\0\1\73\1\0\1\62\2\73\1\0"+
    "\1\73\7\0\3\73\1\62\3\0\2\73\4\0\1\73"+
    "\27\0\12\14\1\0\63\14\12\16\1\0\63\16\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\2\4\1\176\24\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\17\4\1\177"+
    "\7\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\4\1\200\25\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\201\26\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\14\4"+
    "\1\202\12\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\21\4\1\203\5\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\21\4\1\204\5\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\6\4\1\205\20\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\6\4"+
    "\1\206\20\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\5\4\1\207\10\4"+
    "\1\210\10\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\4\1\211\25\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\6\4\1\212\20\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\6\4\1\213\20\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\12\4"+
    "\1\214\14\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\11\4\1\215\6\4"+
    "\1\216\6\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\217\23\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\4\4\1\220\22\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\221\2\4\1\222\16\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\22\4\1\223\4\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\224\14\4\1\225\1\4\1\226\6\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\227\26\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\22\4\1\230"+
    "\4\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\21\4\1\231\5\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\6\4\1\232\20\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\6\4\1\233\20\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\26\4\1\234"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\235\26\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\16\4\1\236\10\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\12\4\1\237"+
    "\14\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\5\4\1\240\21\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\14\4\1\241\12\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\14\4\1\242\12\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\243"+
    "\23\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\16\4\1\244\10\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\10\4\1\245\16\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\15\4\1\246\11\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\20\4\1\247"+
    "\6\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\250\26\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\7\4\1\251\17\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\252\25\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\4\4\1\253\2\4"+
    "\1\254\17\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\2\4\1\255\24\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\7\4\1\256\17\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\257\7\4\1\260\6\4\1\261\7\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\17\4\1\262\7\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\263\16\4\1\264\7\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\21\4"+
    "\1\265\5\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\21\4\1\266\5\4"+
    "\20\0\1\4\1\0\2\173\10\0\1\173\2\0\1\63"+
    "\1\64\12\0\1\63\13\0\1\64\27\0\10\174\1\267"+
    "\65\174\7\270\1\271\1\175\65\270\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\272"+
    "\23\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\6\4\1\273\20\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\16\4\1\274\10\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\2\4\1\275\24\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\15\4\1\276"+
    "\11\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\10\4\1\277\16\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\16\4\1\300\10\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\6\4\1\301\20\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\7\4\1\302"+
    "\17\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\303\26\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\304\21\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\305\23\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\306\26\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\307\26\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\20\4"+
    "\1\310\6\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\14\4\1\311\12\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\21\4\1\312\5\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\313\23\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\314\25\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\315\12\4"+
    "\1\316\2\4\1\317\5\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\17\4"+
    "\1\320\7\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\17\4\1\321\7\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\21\4\1\322\5\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\6\4\1\323\20\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\7\4"+
    "\1\324\17\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\15\4\1\325\11\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\4\1\326\25\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\327\25\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\2\4"+
    "\1\330\24\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\331\23\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\332\23\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\333\23\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\334\13\4\1\335\7\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\12\4"+
    "\1\336\14\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\337\4\4\1\340"+
    "\21\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\21\4\1\341\5\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\12\4\1\342\14\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\13\4\1\343\13\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\344\26\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\16\4\1\345\10\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\346\23\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\2\4"+
    "\1\347\24\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\16\4\1\350\10\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\12\4\1\351\14\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\352\25\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\10\4"+
    "\1\353\16\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\20\4\1\354\6\4"+
    "\20\0\1\4\7\174\1\355\1\267\65\174\10\270\1\356"+
    "\65\270\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\357\23\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\2\4\1\360\24\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\4\1\361"+
    "\25\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\362\26\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\14\4\1\363\12\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\10\4"+
    "\1\364\16\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\365\23\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\366\26\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\367\26\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\5\4\1\370\21\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\371\23\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\372\26\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\5\4\1\373"+
    "\21\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\374\23\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\375\25\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\2\4\1\376\24\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\10\4\1\377"+
    "\16\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\6\4\1\u0100\20\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\u0101\26\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\7\4"+
    "\1\u0102\17\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\3\4\1\u0103\23\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\5\4\1\u0104\21\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\16\4\1\u0105\10\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\17\4"+
    "\1\u0106\7\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\4\1\u0107\25\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\1\4\1\u0108\25\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\1\4\1\u0109\25\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\u010a\25\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\2\4\1\u010b\24\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\15\4\1\u010c\11\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\21\4\1\u010d\5\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\6\4"+
    "\1\u010e\20\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\10\4\1\u010f\16\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\6\4\1\u0110\20\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\21\4\1\u0111\5\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\1\4"+
    "\1\u0112\25\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\u0113\26\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\4\1\u0114\25\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\15\4\1\u0115\11\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\u0116"+
    "\23\4\20\0\1\4\7\270\1\271\1\356\65\270\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\14\4\1\u0117\12\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\10\4\1\u0118"+
    "\16\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\3\4\1\u0119\23\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\12\4\1\u011a\14\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\4\1\u011b\25\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\22\4\1\u011c"+
    "\4\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\1\4\1\u011d\25\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\u011e\26\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u011f\23\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\4\1\u0120\25\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\2\4\1\u0121\24\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\u0122\21\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\24\4"+
    "\1\u0123\2\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\u0124\26\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\u0125\23\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\1\u0126\26\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\6\4\1\u0127\20\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\3\4\1\u0128\23\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\u0129\23\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\10\4"+
    "\1\u012a\16\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\u012b\26\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\u012c\23\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\20\4\1\u012d\6\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\15\4\1\u012e"+
    "\11\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\7\4\1\u012f\17\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\10\4\1\u0130\16\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\15\4\1\u0131\11\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\1\4\1\u0132"+
    "\25\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\17\4\1\u0133\7\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\1\u0134\26\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\21\4"+
    "\1\u0135\5\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\22\4\1\u0136\4\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\21\4\1\u0137\5\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\3\4\1\u0138\23\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\12\4"+
    "\1\u0139\14\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\7\4\1\u013a\17\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\2\4\1\u013b\24\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\5\4\1\u013c\21\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\3\4"+
    "\1\u013d\23\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\7\4\1\u013e\17\4"+
    "\20\0\1\4\1\0\3\4\1\0\2\4\4\0\5\4"+
    "\1\0\1\4\4\0\5\4\1\u013f\21\4\20\0\1\4"+
    "\1\0\3\4\1\0\2\4\4\0\5\4\1\0\1\4"+
    "\4\0\16\4\1\u0140\10\4\20\0\1\4\1\0\3\4"+
    "\1\0\2\4\4\0\5\4\1\0\1\4\4\0\6\4"+
    "\1\u0141\20\4\20\0\1\4\1\0\3\4\1\0\2\4"+
    "\4\0\5\4\1\0\1\4\4\0\1\u0142\26\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\12\4\1\u0143\14\4\20\0\1\4\1\0"+
    "\3\4\1\0\2\4\4\0\5\4\1\0\1\4\4\0"+
    "\11\4\1\u0144\15\4\20\0\1\4\1\0\3\4\1\0"+
    "\2\4\4\0\5\4\1\0\1\4\4\0\3\4\1\u0145"+
    "\23\4\20\0\1\4\1\0\3\4\1\0\2\4\4\0"+
    "\5\4\1\0\1\4\4\0\10\4\1\u0146\16\4\20\0"+
    "\1\4\1\0\3\4\1\0\2\4\4\0\5\4\1\0"+
    "\1\4\4\0\3\4\1\u0147\23\4\20\0\1\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14570];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\1\11\26\1\10\11"+
    "\3\1\1\11\2\1\5\11\4\1\1\0\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\64\1\5\11\74\1\1\0"+
    "\1\1\1\11\63\1\1\11\1\0\131\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  PigLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PigLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1778) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { return PigTypes.GROUP_KEYWORD;
          }
        case 112: break;
        case 39: 
          { return PigTypes.OR_KEYWORD;
          }
        case 113: break;
        case 52: 
          { return PigTypes.AND_KEYWORD;
          }
        case 114: break;
        case 104: 
          { return PigTypes.GENERATE_KEYWORD;
          }
        case 115: break;
        case 97: 
          { return PigTypes.IMPORT_KEYWORD;
          }
        case 116: break;
        case 60: 
          { return PigTypes.MAP_KEYWORD;
          }
        case 117: break;
        case 93: 
          { return PigTypes.SAMPLE_KEYWORD;
          }
        case 118: break;
        case 69: 
          { return PigTypes.INTO_KEYWORD;
          }
        case 119: break;
        case 106: 
          { return PigTypes.PARALLEL_KEYWORD;
          }
        case 120: break;
        case 35: 
          { return PigTypes.AS_KEYWORD;
          }
        case 121: break;
        case 99: 
          { return PigTypes.RETURNS_KEYWORD;
          }
        case 122: break;
        case 68: 
          { return PigTypes.DESC_KEYWORD;
          }
        case 123: break;
        case 67: 
          { return PigTypes.NULL_KEYWORD;
          }
        case 124: break;
        case 51: 
          { return PigTypes.ANY_KEYWORD;
          }
        case 125: break;
        case 33: 
          { return PigTypes.DOLLAR;
          }
        case 126: break;
        case 111: 
          { return PigTypes.MAPREDUCE_KEYWORD;
          }
        case 127: break;
        case 13: 
          { return PigTypes.RPARENTH;
          }
        case 128: break;
        case 34: 
          { return PigTypes.STR_OP_EQ;
          }
        case 129: break;
        case 41: 
          { return PigTypes.IS_KEYWORD;
          }
        case 130: break;
        case 109: 
          { return PigTypes.OTHERWISE_KEYWORD;
          }
        case 131: break;
        case 22: 
          { return PigTypes.LT;
          }
        case 132: break;
        case 26: 
          { return PigTypes.PERCENT;
          }
        case 133: break;
        case 92: 
          { return PigTypes.STDOUT_KEYWORD;
          }
        case 134: break;
        case 15: 
          { return PigTypes.RBRACE;
          }
        case 135: break;
        case 80: 
          { return PigTypes.STDIN_KEYWORD;
          }
        case 136: break;
        case 105: 
          { return PigTypes.ONSCHEMA_KEYWORD;
          }
        case 137: break;
        case 17: 
          { return PigTypes.RBRACK;
          }
        case 138: break;
        case 10: 
          { return PigTypes.EXEC_LITERAL;
          }
        case 139: break;
        case 44: 
          { return PigTypes.GTEQ;
          }
        case 140: break;
        case 102: 
          { return PigTypes.COGROUP_KEYWORD;
          }
        case 141: break;
        case 78: 
          { return PigTypes.LIMIT_KEYWORD;
          }
        case 142: break;
        case 54: 
          { return PigTypes.SET_KEYWORD;
          }
        case 143: break;
        case 23: 
          { return PigTypes.QMARK;
          }
        case 144: break;
        case 64: 
          { return PigTypes.LOAD_KEYWORD;
          }
        case 145: break;
        case 4: 
          { return TokenType.WHITE_SPACE;
          }
        case 146: break;
        case 98: 
          { return PigTypes.THROUGH_KEYWORD;
          }
        case 147: break;
        case 63: 
          { return PigTypes.LEFT_KEYWORD;
          }
        case 148: break;
        case 45: 
          { return PigTypes.LTEQ;
          }
        case 149: break;
        case 40: 
          { return PigTypes.IF_KEYWORD;
          }
        case 150: break;
        case 88: 
          { return PigTypes.INPUT_KEYWORD;
          }
        case 151: break;
        case 14: 
          { return PigTypes.LBRACE;
          }
        case 152: break;
        case 7: 
          { return PigTypes.MINUS;
          }
        case 153: break;
        case 47: 
          { return PigTypes.NOTEQ;
          }
        case 154: break;
        case 21: 
          { return PigTypes.GT;
          }
        case 155: break;
        case 12: 
          { return PigTypes.LPARENTH;
          }
        case 156: break;
        case 107: 
          { return PigTypes.DISTINCT_KEYWORD;
          }
        case 157: break;
        case 16: 
          { return PigTypes.LBRACK;
          }
        case 158: break;
        case 48: 
          { return PigTypes.DOC_COMMENT;
          }
        case 159: break;
        case 73: 
          { return PigTypes.RIGHT_KEYWORD;
          }
        case 160: break;
        case 59: 
          { return PigTypes.INT_KEYWORD;
          }
        case 161: break;
        case 87: 
          { return PigTypes.INNER_KEYWORD;
          }
        case 162: break;
        case 82: 
          { return PigTypes.CROSS_KEYWORD;
          }
        case 163: break;
        case 50: 
          { return PigTypes.ASC_KEYWORD;
          }
        case 164: break;
        case 49: 
          { return PigTypes.ALL_KEYWORD;
          }
        case 165: break;
        case 36: 
          { return PigTypes.STR_OP_LT;
          }
        case 166: break;
        case 25: 
          { return PigTypes.POUND;
          }
        case 167: break;
        case 20: 
          { return PigTypes.EQUAL;
          }
        case 168: break;
        case 9: 
          { return PigTypes.PLUS;
          }
        case 169: break;
        case 29: 
          { return PigTypes.DOUBLE_LITERAL;
          }
        case 170: break;
        case 91: 
          { return PigTypes.STDERROR_KEYWORD;
          }
        case 171: break;
        case 2: 
          { return PigTypes.INTEGER_LITERAL;
          }
        case 172: break;
        case 3: 
          { return PigTypes.IDENTIFIER;
          }
        case 173: break;
        case 43: 
          { return PigTypes.EQEQ;
          }
        case 174: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 175: break;
        case 71: 
          { return PigTypes.VOID_KEYWORD;
          }
        case 176: break;
        case 42: 
          { return PigTypes.IN_KEYWORD;
          }
        case 177: break;
        case 24: 
          { return PigTypes.COLON;
          }
        case 178: break;
        case 28: 
          { return PigTypes.FLOAT_LITERAL;
          }
        case 179: break;
        case 5: 
          { return PigTypes.DIV;
          }
        case 180: break;
        case 11: 
          { return PigTypes.STRING_LITERAL;
          }
        case 181: break;
        case 37: 
          { return PigTypes.BY_KEYWORD;
          }
        case 182: break;
        case 38: 
          { return PigTypes.STR_OP_GT;
          }
        case 183: break;
        case 108: 
          { return PigTypes.CHARARRAY_KEYWORD;
          }
        case 184: break;
        case 79: 
          { return PigTypes.STORE_KEYWORD;
          }
        case 185: break;
        case 89: 
          { return PigTypes.FILTER_KEYWORD;
          }
        case 186: break;
        case 85: 
          { return PigTypes.ORDER_KEYWORD;
          }
        case 187: break;
        case 101: 
          { return PigTypes.FOREACH_KEYWORD;
          }
        case 188: break;
        case 86: 
          { return PigTypes.OUTER_KEYWORD;
          }
        case 189: break;
        case 57: 
          { return PigTypes.BAG_KEYWORD;
          }
        case 190: break;
        case 81: 
          { return PigTypes.SPLIT_KEYWORD;
          }
        case 191: break;
        case 61: 
          { return PigTypes.BOOLEAN_TRUE;
          }
        case 192: break;
        case 72: 
          { return PigTypes.TUPLE_KEYWORD;
          }
        case 193: break;
        case 27: 
          { return PigTypes.LONG_LITERAL;
          }
        case 194: break;
        case 62: 
          { return PigTypes.FULL_KEYWORD;
          }
        case 195: break;
        case 8: 
          { return PigTypes.DOT;
          }
        case 196: break;
        case 31: 
          { return PigTypes.END_OF_LINE_COMMENT;
          }
        case 197: break;
        case 18: 
          { return PigTypes.SEMICOLON;
          }
        case 198: break;
        case 19: 
          { return PigTypes.COMMA;
          }
        case 199: break;
        case 96: 
          { return PigTypes.DOUBLE_KEYWORD;
          }
        case 200: break;
        case 103: 
          { return PigTypes.STR_OP_MATCHES;
          }
        case 201: break;
        case 83: 
          { return PigTypes.CACHE_KEYWORD;
          }
        case 202: break;
        case 94: 
          { return PigTypes.OUTPUT_KEYWORD;
          }
        case 203: break;
        case 76: 
          { return PigTypes.BOOLEAN_FALSE;
          }
        case 204: break;
        case 55: 
          { return PigTypes.STR_OP_NE;
          }
        case 205: break;
        case 95: 
          { return PigTypes.DEFINE_KEYWORD;
          }
        case 206: break;
        case 58: 
          { return PigTypes.STR_OP_GTE;
          }
        case 207: break;
        case 77: 
          { return PigTypes.FLOAT_KEYWORD;
          }
        case 208: break;
        case 70: 
          { return PigTypes.JOIN_KEYWORD;
          }
        case 209: break;
        case 30: 
          { return PigTypes.C_STYLE_COMMENT;
          }
        case 210: break;
        case 46: 
          { return PigTypes.DCOLON;
          }
        case 211: break;
        case 75: 
          { return PigTypes.UNION_KEYWORD;
          }
        case 212: break;
        case 110: 
          { return PigTypes.PARTITION_KEYWORD;
          }
        case 213: break;
        case 56: 
          { return PigTypes.NOT_KEYWORD;
          }
        case 214: break;
        case 6: 
          { return PigTypes.STAR;
          }
        case 215: break;
        case 100: 
          { return PigTypes.FLATTEN_KEYWORD;
          }
        case 216: break;
        case 74: 
          { return PigTypes.USING_KEYWORD;
          }
        case 217: break;
        case 32: 
          { return PigTypes.DOUBLE_PERIOD;
          }
        case 218: break;
        case 53: 
          { return PigTypes.STR_OP_LTE;
          }
        case 219: break;
        case 90: 
          { return PigTypes.STREAM_KEYWORD;
          }
        case 220: break;
        case 65: 
          { return PigTypes.LONG_KEYWORD;
          }
        case 221: break;
        case 66: 
          { return PigTypes.SHIP_KEYWORD;
          }
        case 222: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
